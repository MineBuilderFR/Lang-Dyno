language.name = English
language.selected = Selected {%0} ({%1}) as the base language

dyno.commands.base.usage = /base [help]
dyno.commands.base.description = Base Command
dyno.commands.base.header = --- Help ---
dyno.commands.base.create.usage = /base <create> [Base Name]
dyno.commands.base.remove.usage = /base <remove> {Base Name]
dyno.commands.base.list.usage = /base <list>
dyno.commands.base.create.success = Base "{%0}" created
dyno.commands.base.remove.success = Base "{%0}" removed
dyno.commands.base.list.header = Bases: ({%0})

dyno.base.noexist = No base with name "{%0}" exists
dyno.base.alreadyexist = Base "{%0}" already exist
dyno.table.alreadyexist = Table "{%0}" already exist
dyno.table.notableexist = Table "{%0}" does not exist
dyno.table.invalid = Table invalid

dyno.commands.table.usage = /table [help]
dyno.commands.table.description = Manage Base table Command
dyno.commands.table.header = --- Help ---
dyno.commands.table.create.usage = /table <create> [Base Name] [Table Name]
dyno.commands.table.remove.usage = /table <remove> [Base Name] [Table Name]
dyno.commands.table.list.usage = /table <list> [Base Name]
dyno.commands.table.put.usage = /table <putstring/putfloat/putbool/putint> [Base Name] [Table Name] [key] [value]
dyno.commands.table.get.usage = /table <getstring/getfloat/getbool/getint> [Base Name] [Table Name] [key]
dyno.commands.table.removeKey.usage = /table <removekey> [Base Name] [Table Name] [key]
dyno.commands.table.reset.usage = /table <reset> [Base Name] [Table Name]
dyno.commands.table.create.success = Table "{%0}" created in base {%1}
dyno.commands.table.remove.success = Table "{%0}" removed in base {%1}
dyno.commands.table.list.header = Tables in Base "{%0}" : ({%1})
dyno.commands.table.put.success = put "{%0}":"{%1}" ({%2}) in Table "{%3}" : Base "{%4}"
dyno.commands.table.get.success = get "{%0}" ({%1})
dyno.commands.table.get.success.null = get NULL
dyno.commands.table.reset.success = Table "{%0}" reset
dyno.commands.table.removeKey.success = Remove Key {%0} in Table "{%1}" : Base "{%2}"

dyno.commands.generic.exception = An unknown error occurred while attempting to perform this command
dyno.commands.generic.permission = You do not have permission to use this command
dyno.commands.generic.notFound = Unknown command. Try /help for a list of commands
dyno.commands.generic.usage = Usage: {%0}

dyno.commands.stop.usage = /stop
dyno.commands.stop.start = Stopping the server

dyno.commands.help.header = --- Showing help page {%0} of {%1} (/help <page>) ---
dyno.commands.help.usage = /help [page|command name]

dyno.server.start = Starting Dyno Packet DB
dyno.server.info = This server is running {%0} version {%1} "{%2}" (API {%3})
dyno.server.info.extended = This server is running {%0} {%1} "{%2}" implementing API {%3} (protocol version {%4})
dyno.server.license = {%0} is distributed under the GPL License version 3 and later
dyno.server.tickOverload = Can't keep up! Is the server overloaded?
dyno.server.startFinished = Done ({%0}s)! For help, type "help" or "?"

dyno.command.plugins.description = Gets a list of plugins running on the server
dyno.command.plugins.success = Plugins ({%0}): {%1}
dyno.command.plugins.usage = /plugins

dyno.command.status.description = Reads back the server's performance.
dyno.command.status.usage = /status

dyno.command.status.title = Server status
dyno.command.status.days = days
dyno.command.status.hours = hours
dyno.command.status.minutes = minutes
dyno.command.status.seconds = seconds
dyno.command.status.uptime = Uptime:
dyno.command.status.AverageTPS = Average TPS:
dyno.command.status.CurrentTPS = Current TPS:
dyno.command.status.Threadcount = Thread count:
dyno.command.status.Mainmemory = Main thread memory;
dyno.command.status.Totalmemory = Total memory:
dyno.command.status.Totalvirtualmemory = Total virtual memory:
dyno.command.status.Heapmemory = Heap memory:
dyno.command.status.Maxmemorysystem = Maximum memory (system):


dyno.command.help.description = Shows the help menu
dyno.command.stop.description = Stops the server

dyno.command.gc.description = Fires garbage collection tasks
dyno.command.gc.usage = /gc

dyno.command.version.description = Shows the Dyno version

dyno.crash.create = An unrecoverable error has occurred and the server has crashed. Creating a crash dump
dyno.crash.error = Could not create crash dump: {%0}

dyno.plugin.load = Loading {%0}
dyno.plugin.enable = Enabling {%0}
dyno.plugin.disable = Disabling {%0}
dyno.plugin.restrictedName = Restricted name
dyno.plugin.incompatibleAPI = Incompatible API version
dyno.plugin.unknownDependency = Unknown dependency
dyno.plugin.circularDependency = Circular dependency detected
dyno.plugin.genericLoadError = Could not load plugin '{%0}'
dyno.plugin.spacesDiscouraged = Plugin '{%0}' uses spaces in its name, this is discouraged
dyno.plugin.loadError = Could not load plugin '{%0}': {%1}
dyno.plugin.duplicateError = Could not load plugin '{%0}': plugin exists
dyno.plugin.fileError = Could not load '{%0}' in folder '{%1}': {%2}
dyno.plugin.commandError = Could not load command {%0} for plugin {%1}
dyno.plugin.aliasError = Could not load alias {%0} for plugin {%1}
dyno.plugin.deprecatedEvent = Plugin '{%0}' has registered a listener for '{%1}' on method '{%2}', but the event is Deprecated.
dyno.plugin.eventError = Could not pass event '{%0}' to '{%1}': {%2} on {%3}

dyno.exception.table.invalidReturnValueException.message = Invalid return value : {%0} , {%1} given
dyno.exception.table.invalidReturnValueException.messageBase = Invalid return value
dyno.exception.table.invalidTableException = The table is invalid
dyno.exception.table.removeKeyException = Key "{%0}" does not exist
dyno.exception.base.BaseAlreadyExistException = Base "{%0}" already exists
dyno.exception.base.NoBaseExistException = No bases with name "{%0}" exists
dyno.exception.table.math.InvalidValueMathException.notValidValue = "{%0}" is not a float or integer!
dyno.exception.table.math.KeyDoesNotExistException = You can not calculate a value that does not exist
dyno.exception.table.math.InvalidCalculException = Invalid calculation

dyno.client.timeout = Timeout
dyno.client.disconnect = Dyno client {%0}:{%1} has disconnected due to {%2}
dyno.client.noVerified = Dyno client {%0}:{%1} is not verified
dyno.client.connect.invalidProtocol = Incompatible Protocol version! Require Dyno version: {%0}
dyno.client.connect.wrongPassword = Dyno client {%0}:{%1} tried to connect with wrong password!
dyno.client.sendUnknownPacket = Dyno client {%0}:{%1} send an unknown packet {%2}
dyno.client.connect.successfully.connectionMessage = Dyno client {%0}:{%1} has connected successfully
dyno.client.connect.successfully.description = description: {%0}
dyno.client.packetReceivedlog = Received {%0} Packet from {%1}:{%2}
; Before checking the connection
dyno.client.preConnect = Dyno client {%0}:{%1} has connected

dyno.exception.packet.outputReceivedError = Output packet can not be received by Dyno

dyno.packet.received.inputPacket.createBaseSuccessfully = Base {%0} created
dyno.packet.received.inputPacket.removeBaseSuccessfully = Base {%0} removed
dyno.packet.received.inputPacket.removeTableSuccessfully = Table {%0} removed in base {%1}
dyno.packet.received.inputPacket.createTableSuccessfully = Table {%0} created in base {%1}
dyno.packet.received.inputPacket.getSuccessfully = get "{%0}" ({%1})
dyno.packet.received.inputPacket.putSuccessfully = put "{%0}":"{%1}" ({%2}) in Table "{%3}" : Base "{%4}"
dyno.packet.received.inputPacket.removeKeySuccessfully = Remove Key {%0} in Table "{%1}" : Base "{%2}"
dyno.packet.received.inputPacket.resetTableSuccessfully = Remove Table "{%0}" in Base "{%1}"

dyno.mysql.connection.successful = Login to mysql successful
dyno.mysql.connection.could = Could not connect to MySQL
dyno.mysql.connection.failure = Failure to connect to MySQL
dyno.mysql.connection.alreadySet = Database is already set and is not closed!
dyno.mysql.connection.logAutoDynToSql = Database updated : Auto DynToSQL
dyno.mysql.connection.startAutoDynToSql = Starting Mysql Auto DynToSQL every {%0} seconds
